import axios from 'axios';
import type { AxiosInstance } from 'axios';

// –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
const API_SERVERS = process.env.NODE_ENV === 'development'
  ? [
      'http://localhost:3001/api',        // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
      'https://87.242.103.146/api',       // –†–µ–∑–µ—Ä–≤–Ω—ã–π HTTPS —Å–µ—Ä–≤–µ—Ä
    ]
  : [
      'https://87.242.103.146/api',       // Production - HTTPS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend
    ];

let currentApiUrl: string = import.meta.env.VITE_API_URL || API_SERVERS[0];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth(baseURL: string): Promise<boolean> {
  try {
    const response = await axios.get(`${baseURL}/health`, {
      timeout: 5000,
      withCredentials: false
    });
    return response.status === 200;
  } catch {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞
async function findWorkingServer(): Promise<string> {
  console.log('üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...');

  for (const server of API_SERVERS) {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è—é ${server}...`);
    const isWorking = await checkServerHealth(server);
    if (isWorking) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä: ${server}`);
      return server;
    }
  }

  console.warn('‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  return API_SERVERS[0];
}

// –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
function createApiClient(baseURL: string): AxiosInstance {
  return axios.create({
    baseURL,
    timeout: 60000,
    headers: {
      'Content-Type': 'application/json',
    },
    withCredentials: false,
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
async function initializeApiClient(): Promise<AxiosInstance> {
  currentApiUrl = await findWorkingServer();
  const client = createApiClient(currentApiUrl);

  // Request interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  client.interceptors.request.use((config) => {
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  });

  // Response interceptor —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–æ–≤
  client.interceptors.response.use(
    (response) => response,
    async (error) => {
      // –ï—Å–ª–∏ 401 - –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
      if (error.response?.status === 401) {
        localStorage.removeItem('authToken');
        window.location.href = '/login';
        return Promise.reject(error);
      }

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
      if (!error.response && (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND' || error.code === 'TIMEOUT')) {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...');

        // –ò—â–µ–º –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä
        const newServerUrl = await findWorkingServer();

        if (newServerUrl !== currentApiUrl) {
          console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å ${currentApiUrl} –Ω–∞ ${newServerUrl}`);
          currentApiUrl = newServerUrl;

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
          const newClient = createApiClient(newServerUrl);

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
          try {
            const retryConfig = { ...error.config };
            retryConfig.baseURL = newServerUrl;
            delete retryConfig._retry; // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤

            const token = localStorage.getItem('authToken');
            if (token) {
              retryConfig.headers.Authorization = `Bearer ${token}`;
            }

            const response = await newClient.request(retryConfig);
            return response;
          } catch (retryError) {
            console.error('–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω:', retryError);
          }
        }
      }

      return Promise.reject(error);
    }
  );

  return client;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–∏—Å —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
export const apiClientPromise = initializeApiClient();

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ª–µ–Ω–∏–≤—ã–π API –∫–ª–∏–µ–Ω—Ç
export const apiClient = new Proxy({} as AxiosInstance, {
  get(_target, prop) {
    return async (...args: any[]) => {
      const client = await apiClientPromise;
      return (client as any)[prop](...args);
    };
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ URL API
export const getCurrentApiUrl = (): string => currentApiUrl;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
export const switchToServer = async (serverUrl: string): Promise<void> => {
  const isWorking = await checkServerHealth(serverUrl);
  if (isWorking) {
    currentApiUrl = serverUrl;
    console.log(`–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: ${serverUrl}`);
  } else {
    console.error(`–°–µ—Ä–≤–µ—Ä ${serverUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    throw new Error(`Server ${serverUrl} is not available`);
  }
};

export default apiClient;